// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: message/example_service.proto

package rpcmessage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExampleUserServiceClient is the client API for ExampleUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleUserServiceClient interface {
	SayHello(ctx context.Context, in *ExampleSayHelloRequest, opts ...grpc.CallOption) (*ExampleSayHelloResponse, error)
}

type exampleUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleUserServiceClient(cc grpc.ClientConnInterface) ExampleUserServiceClient {
	return &exampleUserServiceClient{cc}
}

func (c *exampleUserServiceClient) SayHello(ctx context.Context, in *ExampleSayHelloRequest, opts ...grpc.CallOption) (*ExampleSayHelloResponse, error) {
	out := new(ExampleSayHelloResponse)
	err := c.cc.Invoke(ctx, "/message.ExampleUserService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleUserServiceServer is the server API for ExampleUserService service.
// All implementations must embed UnimplementedExampleUserServiceServer
// for forward compatibility
type ExampleUserServiceServer interface {
	SayHello(context.Context, *ExampleSayHelloRequest) (*ExampleSayHelloResponse, error)
	mustEmbedUnimplementedExampleUserServiceServer()
}

// UnimplementedExampleUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExampleUserServiceServer struct {
}

func (UnimplementedExampleUserServiceServer) SayHello(context.Context, *ExampleSayHelloRequest) (*ExampleSayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedExampleUserServiceServer) mustEmbedUnimplementedExampleUserServiceServer() {}

// UnsafeExampleUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleUserServiceServer will
// result in compilation errors.
type UnsafeExampleUserServiceServer interface {
	mustEmbedUnimplementedExampleUserServiceServer()
}

func RegisterExampleUserServiceServer(s grpc.ServiceRegistrar, srv ExampleUserServiceServer) {
	s.RegisterService(&ExampleUserService_ServiceDesc, srv)
}

func _ExampleUserService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleSayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleUserServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.ExampleUserService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleUserServiceServer).SayHello(ctx, req.(*ExampleSayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleUserService_ServiceDesc is the grpc.ServiceDesc for ExampleUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.ExampleUserService",
	HandlerType: (*ExampleUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ExampleUserService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/example_service.proto",
}
